# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'
    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew clean build -x test
      env:
        DB_ENDPOINT: ${{ secrets.DB_ENDPOINT }}
        DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        JWT_TOKEN: ${{ secrets.JWT_TOKEN }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}

    - name: Create env file
      run: |
        echo DB_ENDPOINT=${{ secrets.DB_ENDPOINT }} >> .env
        echo DB_SCHEMA=${{ secrets.DB_SCHEMA }} >> .env
        echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
        echo JWT_TOKEN=${{ secrets.JWT_TOKEN }} >> .env
        echo SERVER_PORT=${{ secrets.SERVER_PORT }} >> .env

    ## 이미지 빌드 및 도커허브에 push
    - name: server docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/capstone-design-server .
        docker push ${{ secrets.DOCKER_REPO }}/capstone-design-server

    - name: nginx docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile-nginx -t ${{ secrets.DOCKER_REPO }}/capstone-design-nginx .
        docker push ${{ secrets.DOCKER_REPO }}/capstone-design-nginx


    - name: Copy docker-compose.yaml to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        source: "/github/workspace/docker-compose.yaml"
        target: "/home/ubuntu/"

    - name: Copy .env to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        source: "/github/workspace/.env"
        target: "/home/ubuntu/"

    ## docker compose up
    # HOST : 인스턴스 주소
    # KEY : rsa - 전부 복사, % 제외
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        script: |
          sudo docker pull ${{ secrets.DOCKER_REPO }}/capstone-design-server
          sudo docker pull ${{ secrets.DOCKER_REPO }}/capstone-design-nginx
          sudo docker-compose -f /home/ubuntu/github/workspace/docker-compose.yaml down
          sudo docker-compose -f /home/ubuntu/github/workspace/docker-compose.yaml up -d --force-recreate
          docker image prune -f
    
